//implementation of double linked list
#include<stdio.h>
#include<stdlib.h>
struct node {
	int data;
	struct node *prev;
	struct node *next;
};
typedef struct node Node;
Node *head = NULL;
Node *tail = NULL;
void insert_at_head(int val){
	//creating the node
	Node *newnode = (Node *)malloc(sizeof(Node));
	newnode->prev=NULL;
	newnode->next=NULL;
	newnode->data=val;
	if(head==NULL && tail==NULL)
	{
		head=newnode;
		tail=newnode;
	}
	else{
		newnode->next=head;
		head->prev=newnode;
		head=newnode;
	}
}
void insert_at_tail(int val){
	//creating the node
	Node *newnode = (Node *)malloc(sizeof(Node));
	newnode->prev=NULL;
	newnode->next=NULL;
	newnode->data=val;
	if(head==NULL && tail==NULL)
	{
		head=newnode;
		tail=newnode;
	}
	else{
		tail->next=newnode;
		newnode->prev=tail;
		tail=newnode;
	}
}
void display_from_left()
{
	if(head==NULL && tail == NULL)
	{
		printf("No nodes to display\n");
	}
	else {
		Node *temp=head;
		while(temp != NULL){
			printf("%d ",temp->data);
			temp=temp->next;
		}
		printf("\n");
	}
}
void display_from_right()
{
	if(head==NULL && tail == NULL)
	{
		printf("No nodes to display\n");
	}
	else {
		Node *temp=tail;
		while(temp != NULL){
			printf("%d ",temp->data);
			temp=temp->prev;
		}
		printf("\n");
	}
}
void delete_at_head()
{
	//linked list is empty
	if(head==NULL && tail==NULL)
	{
		printf("No nodes to delete\n");
	}
	else if(head==tail){
		//list contains only one node
		Node *tobeDeleted=head;
		head=NULL;
		tail=NULL;
		free(tobeDeleted);
	}
	else{
		Node *tobeDeleted = head;
		head = head->next;
		free(tobeDeleted);
	}
}
void delete_at_tail()
{
	//linked list is empty
	if(head==NULL && tail==NULL)
	{
		printf("No nodes to delete\n");
	}
	else if(head==tail){
		//list contains only one node
		Node *tobeDeleted=head;
		head=NULL;
		tail=NULL;
		free(tobeDeleted);
	}
	else{
		Node *tobeDeleted = head;
		head = head->next;
		free(tobeDeleted);
	}
}
int main()
{
	int ch;
	while(1){
		printf("Enter\n1. Insert at head\n2.Insert at tail\n3.Delete at head\n4.Delete at tail\n5.Display forward\n6.Display backward\nAnyother to Exist\n");
		scanf("%d",&ch);
		if(ch==1){
			//implement insert at head
			int val;
			printf("Enter a value for the node to be inserted: ");
			scanf("%d",&val);
			insert_at_head(val);
		}
		else if(ch==2){
			//implement insert at tail
			int val;
			printf("Enter a value for the node to be inserted: ");
			scanf("%d",&val);
			insert_at_tail(val);
		}
		else if(ch==3){
			//delete at head
			delete_at_head();
		}
		else if(ch==4)
		{
			//delete at tail
			delete_at_tail();
		}
		else if(ch==5)
		{
			display_from_left();
		}
		else if(ch==6)
		{
			display_from_right();
		}
		else{
			printf("Thank you\n");
			break;
		}
    }
}
